import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import tdemapreduce.*;
import tdemapreduce.AverageTransactionMapper;
import tdemapreduce.AverageTransactionReducer;
import tdemapreduce.ExtremesMapper;
import tdemapreduce.ExtremesReducer;
import tdemapreduce.FlowCountMapper;
import tdemapreduce.FlowCountReducer;

import java.io.*;

public class MainDriver {

    public static void main(String[] args) throws Exception {
        // Desativa todos os logs do log4j
        org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
        if (args.length < 2) {
            System.err.println("Uso: MainDriver <input_path> <output_base_path>");
            System.exit(-1);
        }

        String inputPath = args[0];
        String outputBase = args[1];
        Configuration conf = new Configuration();

        // -------------------- JOB 1: Contagem de Transações por Flow --------------------
        String job1Output = outputBase + "_flow";
        deleteIfExists(job1Output); // Remove saída anterior, se existir
        Job job1 = Job.getInstance(conf, "Contagem por Tipo de Fluxo");
        job1.setJarByClass(MainDriver.class);
        job1.setMapperClass(FlowCountMapper.class);
        job1.setReducerClass(FlowCountReducer.class);
        job1.setOutputKeyClass(Text.class);
        job1.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job1, new Path(inputPath));
        FileOutputFormat.setOutputPath(job1, new Path(job1Output));
        if (!job1.waitForCompletion(true)) System.exit(1);
        System.out.println("Resultado do Job 1 (Transações por Tipo de Fluxo):");
        printOutput(job1Output);

        // -------------------- JOB 2: Valor Médio das Transações no Brasil --------------------
        String job2Output = outputBase + "_avg_brazil";
        deleteIfExists(job2Output);
        Job job2 = Job.getInstance(conf, "Média de Valor por Ano - Brasil");
        job2.setJarByClass(MainDriver.class);
        job2.setMapperClass(AverageTransactionMapper.class);
        job2.setReducerClass(AverageTransactionReducer.class);
        job2.setOutputKeyClass(IntWritable.class);
        job2.setOutputValueClass(FloatWritable.class);
        FileInputFormat.addInputPath(job2, new Path(inputPath));
        FileOutputFormat.setOutputPath(job2, new Path(job2Output));
        if (!job2.waitForCompletion(true)) System.exit(1);
        System.out.println("Resultado do Job 2 (Valor Médio por Ano no Brasil):");
        printOutput(job2Output);

        // -------------------- JOB 3: Transações Extremas no Brasil em 2016 --------------------
        String job3Output = outputBase + "_extremes_brazil_2016";
        deleteIfExists(job3Output);
        Job job3 = Job.getInstance(conf, "Mais cara e mais barata - Brasil 2016");
        job3.setJarByClass(MainDriver.class);
        job3.setMapperClass(ExtremesMapper.class);
        job3.setReducerClass(ExtremesReducer.class);
        job3.setOutputKeyClass(Text.class);
        job3.setOutputValueClass(FloatWritable.class);
        FileInputFormat.addInputPath(job3, new Path(inputPath));
        FileOutputFormat.setOutputPath(job3, new Path(job3Output));
        if (!job3.waitForCompletion(true)) System.exit(1);
        System.out.println("Resultado do Job 3 (Maior e Menor Transação - Brasil 2016):");
        printOutput(job3Output);

        System.out.println("Todos os jobs foram executados com sucesso.");
    }

    // Função auxiliar para imprimir os resultados no console
    public static void printOutput(String outputDirPath) throws IOException {
        java.nio.file.Path path = java.nio.file.Paths.get(outputDirPath, "saida_jobs.txt");
        if (!java.nio.file.Files.exists(path)) {
            System.err.println("Arquivo de saída não encontrado: " + path);
            return;
        }

        BufferedReader reader = new BufferedReader(new FileReader(path.toFile()));
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }
        reader.close();
    }

    // Função auxiliar para deletar diretório de saída se já existir
    public static void deleteIfExists(String pathStr) throws IOException {
        java.nio.file.Path path = java.nio.file.Paths.get(pathStr);
        if (java.nio.file.Files.exists(path)) {
            java.nio.file.Files.walk(path)
                    .sorted(java.util.Comparator.reverseOrder())
                    .map(java.nio.file.Path::toFile)
                    .forEach(File::delete);
        }
    }
}
